{"version":3,"file":"../style.css","sources":["style.scss","_vars.scss","_resets.scss","_grid.scss","_grid-claus-edition.scss","_mqs.scss"],"sourcesContent":["// @import 'normalize8-not-sass';\n@import 'vars';\n@import 'resets';\n@import 'grid';\n@import 'grid-claus-edition';\n@import 'mqs';\n\n\n.wrapper {\n    // @include isGridContainer('minmax(16px, 1fr) minmax(auto, 1200px) minmax(16px, 1fr)');\n\n}\n\n.middle-content {\n    // justify-self: center;\n    // align-self: center;\n    max-width: 1200px;\n    // @include isGridContainer('repeat(5, 1fr)');\n    background: #bada55;\n}\n\n.row {\n    @include isGridContainer('minmax(16px, 1fr) minmax(auto, 1200px) minmax(16px, 1fr)');\n    width: 100%;\n}","// /**************************************************\r\n// Generel variables for framework\r\n// ***************************************************/\r\n\r\n// Getting fonts\r\n@import url('https://fonts.googleapis.com/css?family=Ubuntu:300,400,500,700');\r\n\r\n//\r\n// SCSS VARS_____________________\r\n//\r\n// Fonts and fallbacks\r\n$main-font: 'Ubuntu', sans-serif;\r\n\r\n// Core Colors.\r\n// tc = Theme Color;\r\n$tc-ubuntu-orange: #E95420;\r\n$tc-white: #FFFFFF;\r\n$tc-black: #000000;\r\n\r\n// Supporting colors\r\n$tc-light-aubergine: #77216F;\r\n$tc-mid-aubergine: #5E2750;\r\n$tc-dark-aubergine: #2C001E;\r\n\r\n// Neutral colors\r\n$tc-warm-grey: #AEA79F;\r\n$tc-cool-grey: #333333;\r\n$tc-txt-grey: #111111;\r\n\r\n$color-theme: (\r\n    prim1: $tc-ubuntu-orange,\r\n    prim2: $tc-white,\r\n    prim3: $tc-black,\r\n    sec1 : $tc-light-aubergine,\r\n    sec2 : $tc-mid-aubergine,\r\n    sec3 : $tc-dark-aubergine,\r\n    tri1 : $tc-warm-grey,\r\n    tri2 : $tc-cool-grey,\r\n    tri3 : $tc-txt-grey\r\n);\r\n\r\n\r\n@function getColor($key) {\r\n    @if not map-has-key($color-theme, $key) {\r\n        @warn 'no color with that name found.';\r\n    }\r\n    @else {\r\n        @return map-get($color-theme, $key);\r\n    }\r\n}\r\n\r\n// Widths for mediaqueries\r\n$tablet-width: 300px;   // below is phone. \r\n                        // between is tablet.\r\n$desktop-width: 1024px; // above is desktop \r\n\r\n$retina-width: 2100px;  // above is retina\r\n\r\n$mqBuffer: 1px; // buffer between mq's\r\n\r\n$gridcontainer-exists: true;\r\n\r\n$debug: false;\r\n\r\n/*\r\nRoot vars. STANDARD FONTS AND COLORS \r\n*/\r\n:root {\r\n    /* FONTS AND FALLBACKS */\r\n    \r\n    \r\n    /* Calculation */\r\n    --responsive: calc((var(--min-font) * 1px) + (var(--max-font) - var(--min-font)) * ((100vw - 100px) / (1200 - 100))); /* Ranges from 421px to 1199px */\r\n}\r\n\r\n\r\n\r\n\r\n// @mixin mkGrid($col, $gap: $grid-gap) {\r\n//     @if not ( type-of($col) == number ) {\r\n//         @warn '1st parameter is the number of columns, and therefore a number.';\r\n//     }\r\n//     display: grid;\r\n//     gap: $gap;\r\n//     grid-template-columns: repeat(#{$col}, 1fr);\r\n//     @include mq-phone{\r\n//         grid-template-columns: 1fr;\r\n//     }\r\n//     @include mq-tablet{\r\n//         grid-template-columns: 1fr 1fr;\r\n//     }\r\n// }\r\n","$debug: false !default;\r\n\r\n// Check for dead links during development\r\n@if $debug {\r\n    a[href=\"#\"] {\r\n        background-color: red;\r\n        border: 1px red;\r\n        box-shadow: 0px 0px 10px 0px red;\r\n    }\r\n}\r\n\r\nhtml {\r\n    box-sizing: border-box;\r\n    scroll-behavior: smooth;\r\n\r\n    @if not $debug {\r\n        // user-zoom: fixed;\r\n    }\r\n}\r\n\r\n*, ::before, ::after {\r\n    box-sizing: inherit;\r\n    // box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: $main-font;\r\n    color: getColor(tri3);\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n\r\n    @if not $debug {\r\n        // user-zoom: fixed;    \r\n        /* Prevent native touch events on Windows */\r\n        -ms-touch-action: none;\r\n    \r\n        /* Prevent the callout on tap-hold and text selection */\r\n        -webkit-touch-callout: none;\r\n        -webkit-user-select: none;\r\n        -moz-user-select: none;\r\n        -ms-user-select: none;\r\n        user-select: none;\r\n    \r\n        /* Prevent text resize on orientation change, useful for web-apps */\r\n        -webkit-text-size-adjust: none;\r\n        -moz-text-size-adjust: none;\r\n        -ms-text-size-adjust: none;\r\n        -o-text-size-adjust: none;\r\n        text-size-adjust: none;\r\n    }\r\n}\r\n\r\n%main-font {\r\n    font-family: $main-font;\r\n}\r\n\r\n@for $i from 1 through 6 {\r\n    h#{$i} {\r\n        // font-family: $main-font;\r\n        @extend %main-font;\r\n    }\r\n}\r\n\r\na {\r\n    &:not(:hover) {\r\n        color: getColor(tri3);\r\n        text-decoration: none; // text-decoration-color: var(--tc-grey);\r\n    }\r\n\r\n    &:hover {\r\n        color: getColor(tri3);\r\n        text-decoration-color: getColor(tri3);\r\n    }\r\n}\r\n\r\ncode {\r\n    font-family: monospace;\r\n}","// /**************************************************\r\n// Grid mixins \r\n// v.1.7\r\n// ***************************************************/\r\n// SCSS CSS Grid \r\n\r\n\r\n////\r\n/// This is a poster comment.\r\n/// It will apply annotations to all items from file.\r\n/// @author Michael Koch\r\n/// @group Grid\r\n////\r\n\r\n$gridcontainer-exists: false !default;\r\n\r\n\r\n/// Mixin to define a grid container\r\n/// @author Michael Koch\r\n/// @param {Column specs} $colSpec - Number of columns and spec\r\n/// @param {Row specs} $rowSpec [null] - Number of rows and spec. For no row parse null.\r\n@mixin isGridContainer($colSpec, $rowSpec: null) {\r\n    \r\n    display: grid;\r\n    @if $rowSpec==null {\r\n        grid-template-columns: unquote(inspect($colSpec));\r\n    }\r\n    @else {\r\n        grid-template-columns: unquote(inspect($colSpec));\r\n        grid-template-rows: unquote(inspect($rowSpec));\r\n    }\r\n    \r\n    // Check if a root grid container exist\r\n    @if $gridcontainer-exists == false {\r\n        // Set up box model for root grid container\r\n        box-sizing: border-box;\r\n        // Make all child elements inherit the box model\r\n        & *,\r\n        *::before,\r\n        *::after {\r\n            box-sizing: border-box;\r\n        }\r\n        $gridcontainer-exists: true !global;\r\n    }\r\n    @content;\r\n}\r\n\r\n/// Shorthand mixin to define a grid container\r\n/// @author Michael Koch\r\n/// @param {Column specs} $colSpec - Number of columns and spec\r\n/// @param {Row specs} $rowSpec [null] - Number of rows and spec. For no row parse null.\r\n/// @alias isGridContainer\r\n@mixin igc($colSpec, $rowSpec:null) {\r\n    @include isGridContainer($colSpec, $rowSpec);\r\n    @content;\r\n}\r\n\r\n/// Mixin to make a grid container class\r\n/// @author Michael Koch\r\n/// @param {string} $selector - Selector to make. e.g class, ID, type etc.\r\n/// @param {Column specs} $colSpec - Number of columns and spec\r\n/// @param {Row specs} $rowSpec [null] - Number of rows and spec. For no row parse null.\r\n@mixin makeGridContainer($selector, $colSpec, $rowSpec: null) {\r\n    @if type-of($selector) !=string {\r\n        @warn '1st parameter should be a selector name (e.g: .container), and therefore a string.';\r\n    } \r\n    #{$selector} {\r\n        @include isGridContainer($colSpec, $rowSpec) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n/// Shorthand mixin to make a grid container class\r\n/// @author Michael Koch\r\n/// @param {string} $selector - Selector to make. e.g class, ID, type etc.\r\n/// @param {Column specs} $colSpec - Number of columns and spec\r\n/// @param {Row specs} $rowSpec [null] - Number of rows and spec. For no row parse null.\r\n/// @alias makeGridContainer\r\n@mixin mgc($selector, $colSpec, $rowSpec: null) {\r\n    @include makeGridContainer($selector, $colSpec, $rowSpec) {\r\n        @content;\r\n    }\r\n}\r\n\r\n/// Mixin to define a grid item\r\n/// @author Michael Koch\r\n/// @param {Column span} $colSpan - Row placement in outer grid\r\n/// @param {Row span} $rowSpan [null] - Column placement in outer grid. For no row parse null.\r\n@mixin isGridItem($colSpan, $rowSpan: null) {\r\n    @if $rowSpan==null {\r\n        grid-column: unquote(inspect($colSpan));\r\n    }\r\n    @else {\r\n        grid-column: unquote(inspect($colSpan));\r\n        grid-row: unquote(inspect($rowSpan));\r\n    }\r\n    @content;\r\n}\r\n\r\n/// Shorthand mixin to define a grid item\r\n/// @author Michael Koch\r\n/// @param {Column span} $colSpan - Row placement in outer grid\r\n/// @param {Row span} $rowSpan [null] - Column placement in outer grid. For no row parse null.\r\n/// @alias isGridItem\r\n@mixin igi($colSpan, $rowSpan: null) {\r\n    @include isGridItem($colSpan, $rowSpan);\r\n    @content;\r\n}\r\n\r\n/// Mixin to make a grid item\r\n/// @author Michael Koch\r\n/// @param {string} $selector - Selector to make. e.g class, ID, type etc.\r\n/// @param {Column span} $colSpan - Row placement in outer grid\r\n/// @param {Row span} $rowSpan [null] - Column placement in outer grid. For no row parse null.\r\n@mixin makeGridItem($selector, $colSpan, $rowSpan: null) {\r\n    @if type-of($selector) !=string {\r\n        @warn '1st parameter should be a selector name (e.g: .container), and therefore a string.';\r\n    }\r\n    #{$selector} {\r\n        @include isGridItem($colSpan, $rowSpan) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n/// Shorthand mixin to make a grid item\r\n/// @author Michael Koch\r\n/// @param {Column span} $colSpan - Row placement in outer grid\r\n/// @param {Row span} $rowSpan [null] - Column placement in outer grid. For no row parse null.\r\n/// @alias makeGridItem\r\n@mixin mgi($selector, $colSpan, $rowSpan: null) {\r\n    @include makeGridItem($selector, $colSpan, $rowSpan) {\r\n        @content;\r\n    }\r\n}\r\n\r\n/// Mixin to define a sub grid container\r\n/// @author Michael Koch\r\n/// @param {Column span} $colSpan - Column placement in outer grid\r\n/// @param {Row span} $rowSpan - Row placement in outer grid\r\n/// @param {Column specs} $rowSpec - Number of column and spec in inner grid.\r\n/// @param {Row specs} $rowSpec [null] - Number of rows and spec in inner grid. For no row parse null.\r\n@mixin isSubGridContainer($colSpan, $rowSpan, $colSpec, $rowSpec: null) {\r\n    @include isGridContainer($colSpec, $rowSpec);\r\n    @include isGridItem($colSpan, $rowSpan);\r\n    @content;\r\n}\r\n\r\n/// Shorthand mixin to define a sub grid container\r\n/// @author Michael Koch\r\n/// @param {Column span} $colSpan - Column placement in outer grid\r\n/// @param {Row span} $rowSpan - Row placement in outer grid\r\n/// @param {Column specs} $rowSpec - Number of column and spec in inner grid.\r\n/// @param {Row specs} $rowSpec [null] - Number of rows and spec in inner grid. For no row parse null.\r\n/// @alias isSubGridContainer\r\n@mixin isgc($colSpan, $rowSpan, $colSpec, $rowSpec: null) {\r\n    @include isSubGridContainer($colSpan, $rowSpan, $colSpec, $rowSpec);\r\n    @content;\r\n}\r\n\r\n/// Mixin to make a sub grid container class\r\n/// @author Michael Koch\r\n/// @param {string} $selector - Selector to make. e.g class, ID, type etc.\r\n/// @param {Column span} $colSpan - Column placement in outer grid\r\n/// @param {Row span} $rowSpan - Row placement in outer grid\r\n/// @param {Column specs} $rowSpec - Number of column and spec in inner grid.\r\n/// @param {Row specs} $rowSpec [null] - Number of rows and spec in inner grid. For no row parse null.\r\n@mixin makeSubGridContainer($selector, $colSpan, $rowSpan, $colSpec, $rowSpec: null) {\r\n    @include makeGridItem($selector, $colSpan, $rowSpan) {\r\n        @include isGridContainer($colSpec, $rowSpec) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n/// Shorthand mixin to make a sub grid container class\r\n/// @author Michael Koch\r\n/// @param {string} $selector - Selector to make. e.g class, ID, type etc.\r\n/// @param {Column span} $colSpan - Column placement in outer grid\r\n/// @param {Row span} $rowSpan - Row placement in outer grid\r\n/// @param {Column specs} $rowSpec - Number of column and spec in inner grid.\r\n/// @param {Row specs} $rowSpec [null] - Number of rows and spec in inner grid. For no row parse null.\r\n/// @alias makeSubGridContainer\r\n@mixin msgc($selector, $colSpan, $rowSpan, $colSpec, $rowSpec: null) {\r\n    @include makeSubGridContainer($selector, $colSpan, $rowSpan, $colSpec, $rowSpec) {\r\n        @content;\r\n    }\r\n}\r\n\r\n$grid-index: (  \r\n    2tm: 899, \r\n    2tl: 1, \r\n    dropdown: 210,\r\n    navigation: 205,\r\n    main-header: 200,\r\n    gridcontainer: 90,\r\n    teaser: 60,\r\n    info-text: 50, \r\n    bg-image: 40, \r\n    test3: 'span 4', \r\n    test: '1 / 13', \r\n    test1: '1 / 55', \r\n    test2: '1 / 14'\r\n) !default;\r\n\r\n@function getGrid($key) {\r\n    // @return unquote(map-get($grid-index, $key));\r\n    @if not map-has-key($grid-index, $key) {\r\n        // @warn \"Key `#{$key}` not found. Keys are: '#{map-keys($map: $z-index)}\"; // My compiler doesn't care for warnings, throw error.\r\n        @error \"Key `#{$key}` not found. Keys are: '#{map-keys($map: $grid-index)}'\";\r\n    }\r\n    @return unquote(inspect(map-get($grid-index, $key)));\r\n}\r\n\r\n@mixin getGrid($key) {\r\n    grid-column: getGrid($key);\r\n}","\r\n@mixin grid3($gap){\r\n    display: grid;\r\n    gap: $gap;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    @include mq-phone{\r\n        grid-template-columns: 1fr;\r\n    }\r\n}\r\n\r\n@mixin grid4($gap){\r\n    display: grid;\r\n    gap: $gap;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    @include mq-phone{\r\n        grid-template-columns: 1fr;\r\n    }\r\n    @include mq-tablet{\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n}\r\n\r\n@mixin grid12($gap){\r\n    display: grid;\r\n    gap: $gap;\r\n    grid-template-columns: repeat(12, 1fr);\r\n}\r\n\r\n@mixin makeGrid($col, $gap) {\r\n    @if $col==3 {\r\n        @include grid3($gap);\r\n    }\r\n    @if $col==4 {\r\n        @include grid4($gap);\r\n    }\r\n    @if $col==12 {\r\n        @include grid12($gap);\r\n    }\r\n    @else {\r\n        @warn 'invalid number of grid, you fucking n00b!';\r\n    }\r\n}\r\n\r\n$grid-gap: 16px !default;\r\n\r\n@mixin mkGrid($col, $gap: $grid-gap) {\r\n    display: grid;\r\n    gap: $gap;\r\n    grid-template-columns: repeat(#{$col}, 1fr);\r\n\r\n    @include mq-phone{\r\n        grid-template-columns: 1fr;\r\n    }\r\n    @include mq-tablet{\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n}\r\n\r\n","// /**************************************************\r\n// Media query settings for screen and prints\r\n// ***************************************************/\r\n// @import 'misc'; // For Mixtend hack and various other\r\n\r\n////\r\n/// This is a poster comment.\r\n/// It will apply annotations to all items from file.\r\n/// @group Media queries\r\n/// @author Michael Koch\r\n////\r\n\r\n\r\n/// Default tablet value for breakpoints.\r\n/// Feel very free to override in other files.\r\n/// @author Michael Koch\r\n/// @prop {any} $tablet-width - Below is phone. Between $tablet-width and $dekstop-width is tablet\r\n$tablet-width: 768px !default;\r\n\r\n\r\n/// Default desktop value for breakpoints.\r\n/// Feel very free to override in other files.\r\n/// @author Michael Koch\r\n/// @prop {any} $desktop-width - Above this is desktop\r\n$dekstop-width: 1024px !default;\r\n\r\n/// Default retina 4k value for breakpoints.\r\n/// Feel very free to override in other files.\r\n/// @author Michael Koch\r\n/// @prop {any} $retina-width - Above this is retina 4k\r\n$retina-width: 2100px !default;\r\n\r\n\r\n/// Default buffer value between breakpoints.\r\n/// Feel very free to override in other files.\r\n/// @author Michael Koch\r\n/// @prop {any} $mqBuffer - Above this is desktop\r\n$mqBuffer: 1px !default;\r\n\r\n\r\n/// Mixin to make specific compile placement mediaqueries\r\n/// @author Michael Koch\r\n/// @param {px} $tablet-width - Below is phone. Between $tablet-width and $dekstop-width is tablet\r\n/// @param {px} $desktop-width - Above this is desktop\r\n@mixin mediaQueries($tablet-width, $desktop-width) {\r\n    @media screen and (max-width: #{$tablet-width - $mqBuffer}) {\r\n      // /* Mediaquery for Phones */\r\n      // @include mq-std-font;\r\n    }\r\n    @media screen and (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - $mqBuffer}) {\r\n        // /* Mediaquery for tablet */\r\n        // LIST MEDIAQUERIES FOR TABLET WIDTH HERE\r\n        // @include mq-md-scaler;\r\n        // @include mq-md-header;\r\n        // @include mq-md-gridcontainer;\r\n    }  \r\n    \r\n    @media screen and (min-width: #{$desktop-width}) and (max-width: #{$retina-width - $mqBuffer}) {\r\n        // /* Mediaquery for desktop */\r\n        // LIST MEDIAQUERIES FOR DESKTOP WITH HERE\r\n    } \r\n    \r\n    @media screen and (min-width: #{$retina-width}) {\r\n        // /* Mediaquery for retina 4k */\r\n        // LIST MEDIAQUERIES FOR DESKTOP WIDTH HERE\r\n    }\r\n}\r\n\r\n/// Mixin to make mediaqueries for phone\r\n/// Use like: @include mq-phone{ color: black; }\r\n/// @author Michael Koch\r\n@mixin mq-phone {\r\n    @media screen and (max-width: #{$tablet-width - $mqBuffer}) {\r\n        /* PHONE MQ */\r\n      @content;\r\n    }\r\n}\r\n\r\n/// Shorthand mixin to make mediaqueries for phone\r\n/// Use like: @include mqp{ color: black; }\r\n/// @author Michael Koch\r\n@mixin mqp {\r\n  @include mq-phone {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Mixin to make mediaqueries for tablet\r\n/// Use like: @include mq-tablet{ color: black; }\r\n/// @author Michael Koch\r\n@mixin mq-tablet {\r\n    @media screen and (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - $mqBuffer}) {\r\n        /* TABLET MQ */\r\n      @content;\r\n    }\r\n  }\r\n\r\n/// Shorthand mixin to make mediaqueries for tablet\r\n/// Use like: @include mqt{ color: black; }\r\n/// @author Michael Koch\r\n@mixin mqt {\r\n  @include mq-tablet {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Mixin to make mediaqueries for dekstop\r\n/// Use like: @include mq-desktop{ color: black; }\r\n/// @author Michael Koch\r\n  @mixin mq-desktop {\r\n    @media screen and (min-width: #{$desktop-width}) and (max-width: #{$retina-width - $mqBuffer}) {\r\n        /* DESKTOP MQ */\r\n      @content;\r\n    }\r\n  }\r\n\r\n/// Shorthand mixin to make mediaqueries for dekstop\r\n/// Use like: @include mqd{ color: black; }\r\n/// @author Michael Koch\r\n  @mixin mqd {\r\n    @include mq-desktop {\r\n      @content;\r\n    }\r\n  }\r\n\r\n/// Mixin to make mediaqueries for retina 4k\r\n/// Use like: @include mq-retina{ color: black; }\r\n/// @author Michael Koch\r\n@mixin mq-retina {\r\n  @media screen and (min-width: #{$retina-width}) {\r\n      /* RETINA 4k MQ */\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Shorthand mixin to make mediaqueries for retina 4k\r\n/// Use like: @include mqr{ color: black; }\r\n/// @author Michael Koch\r\n@mixin mqr {\r\n  @include mq-retina {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Mixin to make custom mediaqueries\r\n/// Use like: @include mq-custom(700px, 1200px){ color: black; }\r\n/// @author Michael Koch\r\n/// @param {px} $min - Minimum size\r\n/// @param {px} $max - Maximum size\r\n  @mixin mq-custom($min, $max) {\r\n    @media screen and (min-width: #{$min}) and (max-width: #{$max - $mqBuffer}) {\r\n        /* CUSTOM MQ */\r\n      @content;\r\n    }\r\n  }\r\n\r\n  @mixin mq-custom2($string) {\r\n    @media screen #{unquote($string)} {\r\n        /* CUSTOM MQ */\r\n      @content;\r\n    }\r\n  }\r\n\r\n/// Mixin to make print mediaqueries\r\n/// Use like: @include mq-print{ color: black; }\r\n/// @author Michael Koch\r\n  @mixin mq-print {\r\n    @media print {\r\n        /* PRINT MQ */\r\n      @content;\r\n    }\r\n  }\r\n"],"names":[],"mappings":"ACKA,OAAO,CAAC,qEAAI;AA2DZ;;EAEE;AACF,AAAA,KAAK,CAAC;EACF,yBAAyB;EAGzB,iBAAiB;EACjB,YAAY,CAAA,uGAAC;EAAyG,iCAAiC;CAC1J;;AC9DD,AAAA,IAAI,CAAC;EACD,UAAU,EAAE,UAAU;EACtB,eAAe,EAAE,MAAM;CAK1B;;AAED,AAAA,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC;EACjB,UAAU,EAAE,OAAO;CAEtB;;AAED,AAAA,IAAI,CAAC;EACD,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,WAAW,EDjBH,QAAQ,EAAE,UAAU;ECkB5B,KAAK,EDFK,OAAO;ECGjB,sBAAsB,EAAE,WAAW;EACnC,uBAAuB,EAAE,SAAS;EAI9B,4CAA4C;EAC5C,gBAAgB,EAAE,IAAI;EAEtB,wDAAwD;EACxD,qBAAqB,EAAE,IAAI;EAC3B,mBAAmB,EAAE,IAAI;EACzB,gBAAgB,EAAE,IAAI;EACtB,eAAe,EAAE,IAAI;EACrB,WAAW,EAAE,IAAI;EAEjB,oEAAoE;EACpE,wBAAwB,EAAE,IAAI;EAC9B,qBAAqB,EAAE,IAAI;EAC3B,oBAAoB,EAAE,IAAI;EAC1B,mBAAmB,EAAE,IAAI;EACzB,gBAAgB,EAAE,IAAI;CAE7B;;AAOG,AALJ,EAKM,EAAF,EAAE,EAAF,EAAE,EAAF,EAAE,EAAF,EAAE,EAAF,EAAE,CALK;EACP,WAAW,ED5CH,QAAQ,EAAE,UAAU;CC6C/B;;AASD,AACI,CADH,AACI,IAAK,CAAA,MAAM,EAAE;EACV,KAAK,EDxCC,OAAO;ECyCb,eAAe,EAAE,IAAI;CACxB;;AAJL,AAMI,CANH,AAMI,MAAM,CAAC;EACJ,KAAK,ED7CC,OAAO;EC8Cb,qBAAqB,ED9Cf,OAAO;CC+ChB;;AAGL,AAAA,IAAI,CAAC;EACD,WAAW,EAAE,SAAS;CACzB;;AFlED,AAAA,eAAe,CAAC;EAGZ,SAAS,EAAE,MAAM;EAEjB,UAAU,EAAE,OAAO;CACtB;;AAED,AAAA,IAAI,CAAC;EGED,OAAO,EAAE,IAAI;EAET,qBAAqB,EAAE,wDAA0B;EHFrD,KAAK,EAAE,IAAI;CACd"}